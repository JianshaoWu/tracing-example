RULE CXF Client In
CLASS org.apache.cxf.jaxrs.client.ClientProxyImpl
METHOD doChainedInvocation
HELPER io.opentracing.contrib.agent.OpenTracingHelper
AT ENTRY
BIND
  httpMethod : java.lang.String = $3.getHttpMethod();
  uri : java.lang.String = $1.toString();
  scope : io.opentracing.Scope = getTracer().buildSpan(httpMethod + " " + uri).startActive(true);
IF TRUE
DO
  scope.span().setTag(io.opentracing.tag.Tags.SPAN_KIND.getKey(), io.opentracing.tag.Tags.SPAN_KIND_CLIENT);
  scope.span().setTag(io.opentracing.tag.Tags.HTTP_METHOD.getKey(), httpMethod);
  scope.span().setTag(io.opentracing.tag.Tags.HTTP_URL.getKey(), uri);
  getTracer().inject(scope.span().context(), io.opentracing.propagation.Format$Builtin.HTTP_HEADERS, new com.test.opentracing.JaxRsHeadersTextMap($2));
ENDRULE

RULE CXF Client Out
CLASS org.apache.cxf.jaxrs.client.ClientProxyImpl
METHOD handleResponse
HELPER io.opentracing.contrib.agent.OpenTracingHelper
AT ENTRY
BIND
  scope : io.opentracing.Scope = getTracer().scopeManager().active();
  inMessage : java.util.Map = $1.getExchange().getInMessage();
  returnCode : java.lang.Integer = inMessage.get("org.apache.cxf.message.Message.RESPONSE_CODE");
IF scope != null
DO
  scope.span().setTag(io.opentracing.tag.Tags.HTTP_STATUS.getKey(), returnCode);
  scope.close();
ENDRULE
